{"version":3,"file":"static/js/593.4542102a.chunk.js","mappings":"0MASAA,IAAAA,OAAaC,KAIb,MAAMC,EAAc,aAqFpB,EA9EkBC,IAAe,IAAd,KAAEC,GAAMD,EAGvB,MAAM,MAAEE,EAAK,SAAEC,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,IAChCC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAwBnC,OAhBAC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAgBR,EAAMS,QAAQC,IAAW,IAADC,EAOtC,SANgBhB,IAAMI,GAAMH,UACxBD,IAAMe,EAAME,UAAWf,GACvBF,IAAMe,EAAMG,QAAShB,GACrB,KACA,OAEYiB,OAAqB,QAAfH,EAACD,EAAMK,gBAAQ,IAAAJ,EAAAA,EAAI,KAC9BD,CAEC,IAEpBL,EAASG,EAAc,GACxB,CAACT,EAAMC,KAGNgB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gIAC8CC,SAExDd,EAAMe,OACHf,EAAMgB,KAAKC,IAAU,IAADC,EAChB,MAAMC,EAAUtB,EAASuB,MAAMD,GAC3BF,EAAKI,YAAcF,EAAQE,YAOzBC,EAAWL,EAAKK,SAASjB,QAAQkB,GACnChC,IAAMI,GAAMH,UACRD,IAAMgC,EAAIf,UAAWf,GACrBF,IAAMgC,EAAIC,QAAS/B,GACnB,KACA,OACkB,KAAhB8B,EAAIE,UAOd,OAAIf,OAAuB,QAAjBQ,EAACC,EAAQR,gBAAQ,IAAAO,EAAAA,EAAI,IACE,IAApBI,EAASP,SACTO,EAAS,GAAGG,QAAQV,OACtB,MACEO,EAASP,QAAWE,EAAKT,YAAcS,EAAKR,SAClDa,EAASP,QAERH,EAAAA,EAAAA,KAACc,EAAAA,EAAW,CAERT,KAAMA,EACNK,SAAUA,EACVH,QAAStB,EAASuB,MAAMD,GACpBF,EAAKI,YAAcF,EAAQE,aAJ1BJ,EAAKU,QASf,IAAI,IAEf,MACF,C","sources":["components/WeekView/DaysTask.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n// Import dependencies, declarations and components\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { TaskContext } from '../../TaskContext';\nimport TaskPreview from '../TaskPreview/TaskPreview';\nimport dayjs from 'dayjs';\nimport isBetween from 'dayjs/plugin/isBetween';\n\ndayjs.extend(isBetween);\n\n// Define constants\n\nconst DATE_FORMAT = 'YYYY-MM-DD'; // The format of date retrieved from pixel API.\n\n/**\n * Renders task previews for tasks scheduled for execution on and within `date`.\n * @param {String} date - The date of the week view\n * @returns {JSX.Element} - Representing the dates' tasks\n */\nconst DaysTasks = ({ date }) => {\n\n    // Define & import global and local state variables.\n    const { tasks, channels } = useContext(TaskContext);\n    const [today, setToday] = useState([]);\n    \n    /**\n     * Determine the tasks where `date` is between startDate and dueDate\n     * (inclusive of both range beginnng and end). Or, if date is today, determine\n     * if task overdue. If overdue, add to todays' tasks.\n     * Update state of `today` with returned array.\n     */\n    useEffect(() => {\n        const filteredTasks = tasks.filter((_task) => {\n                const inRange = dayjs(date).isBetween(\n                    dayjs(_task.startDate, DATE_FORMAT),\n                    dayjs(_task.dueDate, DATE_FORMAT),\n                    null,\n                    '[]'\n                );\n                if (inRange && !Number(_task.archived ?? 0)) {\n                    return _task\n                }\n                return false;\n            });\n        setToday(filteredTasks);\n    }, [date, tasks]); \n\n    return (\n        <div className=\"h-[77vh] overflow-y-auto overflow-x-hidden [&::-webkit-scrollbar]:hidden\n                [-ms-overflow-style:none] [scrollbar-width:none] z-0\">\n            {/** Verify today is not empty before proceeding */}\n            {today.length ? (\n                today.map((task) => {\n                    const channel = channels.find((channel) => (\n                        task.channelID === channel.channelID\n                    ))\n\n                    /**\n                     * For each task within the specified date range, identify the subtasks that are\n                     * also scheduled for execution on `date`.\n                     */\n                    const subtasks = task.subtasks.filter((sub) => (\n                        dayjs(date).isBetween(\n                            dayjs(sub.startDate, DATE_FORMAT),\n                            dayjs(sub.endDate, DATE_FORMAT),\n                            null,\n                            '[]'\n                        ) && (sub.subtask !== \"\")\n                    ));\n\n                    /**\n                     * If subtasks or, no subtasks where task is to be started and\n                     * completed on `date`, render task preview with `date` subtasks display.\n                     */                    \n                    if (Number(channel.archived ?? 0) \n                            || ((subtasks.length === 1) \n                            && (!subtasks[0].subtask.length))) {\n                        return null\n                    } else if ((!subtasks.length && (task.startDate === task.dueDate))\n                        || subtasks.length) {\n                        return (\n                            <TaskPreview \n                                key={task.taskID}\n                                task={task}\n                                subtasks={subtasks}\n                                channel={channels.find((channel) => (\n                                    task.channelID === channel.channelID\n                                ))} \n                            />\n                        );\n                    };\n                    return null;\n                })\n            ) : null}\n        </div>\n    );\n};\nexport default DaysTasks;"],"names":["dayjs","isBetween","DATE_FORMAT","_ref","date","tasks","channels","useContext","TaskContext","today","setToday","useState","useEffect","filteredTasks","filter","_task","_task$archived","startDate","dueDate","Number","archived","_jsx","className","children","length","map","task","_channel$archived","channel","find","channelID","subtasks","sub","endDate","subtask","TaskPreview","taskID"],"sourceRoot":""}