{"ast":null,"code":"/* eslint-disable react-hooks/exhaustive-deps */// Import dependencies, declarations and components\nimport React,{useState,useEffect,useContext}from'react';import{TaskContext}from'../../TaskContext';import TaskPreview from'../TaskPreview/TaskPreview';import dayjs from'dayjs';import isBetween from'dayjs/plugin/isBetween';import{jsx as _jsx}from\"react/jsx-runtime\";dayjs.extend(isBetween);// Define constants\nconst DATE_FORMAT='YYYY-MM-DD';// The format of date retrieved from pixel API.\n/**\n * Renders task previews for tasks scheduled for execution on and within `date`.\n * @param {String} date - The date of the week view\n * @returns {JSX.Element} - Representing the dates' tasks\n */const DaysTasks=_ref=>{let{date}=_ref;// Define & import global and local state variables.\nconst{tasks,channels}=useContext(TaskContext);const[today,setToday]=useState([]);/**\n     * Determine the tasks where `date` is between startDate and dueDate\n     * (inclusive of both range beginnng and end). Or, if date is today, determine\n     * if task overdue. If overdue, add to todays' tasks.\n     * Update state of `today` with returned array.\n     */useEffect(()=>{const filteredTasks=tasks.filter(_task=>{var _task$archived;const inRange=dayjs(date).isBetween(dayjs(_task.startDate,DATE_FORMAT),dayjs(_task.dueDate,DATE_FORMAT),null,'[]');if(inRange&&!Number((_task$archived=_task.archived)!==null&&_task$archived!==void 0?_task$archived:0)){return _task;}return false;});setToday(filteredTasks);},[date,tasks]);return/*#__PURE__*/_jsx(\"div\",{className:\"h-[77vh] overflow-y-auto overflow-x-hidden [&::-webkit-scrollbar]:hidden [-ms-overflow-style:none] [scrollbar-width:none] z-0\",children:today.length?today.map(task=>{var _channel$archived;const channel=channels.find(channel=>task.channelID===channel.channelID);/**\n                     * For each task within the specified date range, identify the subtasks that are\n                     * also scheduled for execution on `date`.\n                     */const subtasks=task.subtasks.filter(sub=>dayjs(date).isBetween(dayjs(sub.startDate,DATE_FORMAT),dayjs(sub.endDate,DATE_FORMAT),null,'[]')&&sub.subtask!==\"\");/**\n                     * If subtasks or, no subtasks where task is to be started and\n                     * completed on `date`, render task preview with `date` subtasks display.\n                     */if(Number((_channel$archived=channel.archived)!==null&&_channel$archived!==void 0?_channel$archived:0)||subtasks.length===1&&!subtasks[0].subtask.length){return null;}else if(!subtasks.length&&task.startDate===task.dueDate||subtasks.length){return/*#__PURE__*/_jsx(TaskPreview,{task:task,subtasks:subtasks,channel:channels.find(channel=>task.channelID===channel.channelID)},task.taskID);};return null;}):null});};export default DaysTasks;","map":{"version":3,"names":["React","useState","useEffect","useContext","TaskContext","TaskPreview","dayjs","isBetween","jsx","_jsx","extend","DATE_FORMAT","DaysTasks","_ref","date","tasks","channels","today","setToday","filteredTasks","filter","_task","_task$archived","inRange","startDate","dueDate","Number","archived","className","children","length","map","task","_channel$archived","channel","find","channelID","subtasks","sub","endDate","subtask","taskID"],"sources":["/Users/jasmineburt/Documents/projects/projects/pixel/src/components/WeekView/DaysTask.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n// Import dependencies, declarations and components\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { TaskContext } from '../../TaskContext';\nimport TaskPreview from '../TaskPreview/TaskPreview';\nimport dayjs from 'dayjs';\nimport isBetween from 'dayjs/plugin/isBetween';\n\ndayjs.extend(isBetween);\n\n// Define constants\n\nconst DATE_FORMAT = 'YYYY-MM-DD'; // The format of date retrieved from pixel API.\n\n/**\n * Renders task previews for tasks scheduled for execution on and within `date`.\n * @param {String} date - The date of the week view\n * @returns {JSX.Element} - Representing the dates' tasks\n */\nconst DaysTasks = ({ date }) => {\n\n    // Define & import global and local state variables.\n    const { tasks, channels } = useContext(TaskContext);\n    const [today, setToday] = useState([]);\n    \n    /**\n     * Determine the tasks where `date` is between startDate and dueDate\n     * (inclusive of both range beginnng and end). Or, if date is today, determine\n     * if task overdue. If overdue, add to todays' tasks.\n     * Update state of `today` with returned array.\n     */\n    useEffect(() => {\n        const filteredTasks = tasks.filter((_task) => {\n                const inRange = dayjs(date).isBetween(\n                    dayjs(_task.startDate, DATE_FORMAT),\n                    dayjs(_task.dueDate, DATE_FORMAT),\n                    null,\n                    '[]'\n                );\n                if (inRange && !Number(_task.archived ?? 0)) {\n                    return _task\n                }\n                return false;\n            });\n        setToday(filteredTasks);\n    }, [date, tasks]); \n\n    return (\n        <div className=\"h-[77vh] overflow-y-auto overflow-x-hidden [&::-webkit-scrollbar]:hidden\n                [-ms-overflow-style:none] [scrollbar-width:none] z-0\">\n            {/** Verify today is not empty before proceeding */}\n            {today.length ? (\n                today.map((task) => {\n                    const channel = channels.find((channel) => (\n                        task.channelID === channel.channelID\n                    ))\n\n                    /**\n                     * For each task within the specified date range, identify the subtasks that are\n                     * also scheduled for execution on `date`.\n                     */\n                    const subtasks = task.subtasks.filter((sub) => (\n                        dayjs(date).isBetween(\n                            dayjs(sub.startDate, DATE_FORMAT),\n                            dayjs(sub.endDate, DATE_FORMAT),\n                            null,\n                            '[]'\n                        ) && (sub.subtask !== \"\")\n                    ));\n\n                    /**\n                     * If subtasks or, no subtasks where task is to be started and\n                     * completed on `date`, render task preview with `date` subtasks display.\n                     */                    \n                    if (Number(channel.archived ?? 0) \n                            || ((subtasks.length === 1) \n                            && (!subtasks[0].subtask.length))) {\n                        return null\n                    } else if ((!subtasks.length && (task.startDate === task.dueDate))\n                        || subtasks.length) {\n                        return (\n                            <TaskPreview \n                                key={task.taskID}\n                                task={task}\n                                subtasks={subtasks}\n                                channel={channels.find((channel) => (\n                                    task.channelID === channel.channelID\n                                ))} \n                            />\n                        );\n                    };\n                    return null;\n                })\n            ) : null}\n        </div>\n    );\n};\nexport default DaysTasks;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}